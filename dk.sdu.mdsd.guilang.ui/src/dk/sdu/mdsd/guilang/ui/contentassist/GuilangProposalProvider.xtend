/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.guilang.ui.contentassist

import dk.sdu.mdsd.guilang.guilang.Unit
import dk.sdu.mdsd.guilang.guilang.impl.SpecificationImpl
import dk.sdu.mdsd.guilang.guilang.impl.SpecificationsImpl
import dk.sdu.mdsd.guilang.utils.EntitySpecificationsProvider
import dk.sdu.mdsd.guilang.utils.GuilangModelUtils
import javax.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class GuilangProposalProvider extends AbstractGuilangProposalProvider {
	
	@Inject extension EntitySpecificationsProvider
	@Inject extension GuilangModelUtils
	//@Inject extension GuilangGrammarAccess

	// Filter out default suggestions // Currently not being triggered for Specifications proposals. Both child and parent objects do trigger.
	override completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext, ICompletionProposalAcceptor acceptor) {
		switch(contentAssistContext.currentModel) {
			case SpecificationImpl: return
			case SpecificationsImpl: return
			default: super.completeKeyword(keyword, contentAssistContext, acceptor)
		}
	}
	
	override completeSpecifications_List(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.completeSpecifications_List(model, assignment, context, acceptor)
	}
	
	override complete_Specifications(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_Specifications(model, ruleCall, context, acceptor)
	}
	
	// Add custom suggestions (complete_TheThingYouWant)
	override complete_Option(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(!(model instanceof SpecificationImpl)) return
		var spec = model as SpecificationImpl
		var String[] options = getSpecifications(spec.ref.class).keys
		
		for(o : options) {
			acceptor.accept(createCompletionProposal(o, context))
		}
	}
	
	// This adds all nested entities to the proposals, but the default ones are still listed (including from other files)
	override complete_Specification(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		println("Specification")
		if(!(model instanceof SpecificationsImpl)) return; 
		var unit = model.eContainer as Unit
		val entities = getEntities(unit.layout).filter[e | e.name !== null]
		
		for(e : entities) {
			acceptor.accept(createCompletionProposal(e.name, context))
		}
	}
}
