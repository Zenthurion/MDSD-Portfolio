/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.guilang.scoping

import com.google.inject.Inject
import dk.sdu.mdsd.guilang.guilang.Entity
import dk.sdu.mdsd.guilang.guilang.GuilangPackage
import dk.sdu.mdsd.guilang.guilang.Specification
import dk.sdu.mdsd.guilang.guilang.Unit
import dk.sdu.mdsd.guilang.guilang.UnitContents
import dk.sdu.mdsd.guilang.guilang.UnitInstance
import dk.sdu.mdsd.guilang.guilang.impl.SpecificationImpl
import dk.sdu.mdsd.guilang.guilang.impl.UnitInstanceImpl
import dk.sdu.mdsd.guilang.guilang.impl.UnitInstanceOptionImpl
import dk.sdu.mdsd.guilang.utils.GuilangModelUtils
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class GuilangScopeProvider extends AbstractGuilangScopeProvider {
	override IScope getScope(EObject context, EReference reference) {
		if (reference == GuilangPackage.Literals.SPECIFICATION__ENTITY) {
			return getScopeForSpecificationEntity(context, reference)
		} else if (reference == GuilangPackage.Literals.SPECIFICATION__OPTIONS) {
			return getScopeSpecificationOptions(context, reference) // Not seen triggered
		} else if(reference == GuilangPackage.Literals.OPTION) {
			return getScopeOptions(context, reference) // Not seen triggered
		} 

		return super.getScope(context, reference)
	}

	def private IScope getScopeForSpecificationEntity(EObject context, EReference reference) {
		if(context instanceof SpecificationImpl) {	
			if(context.basicGetEntity instanceof UnitInstanceImpl) { // Before the specification is written
				return getEntitiesForSpecificationScope((context.entity as UnitInstanceImpl).unit)
			} else if(context.eContainer instanceof UnitInstanceOptionImpl) { // After the specification is written
				val entity = (context.eContainer.eContainer as SpecificationImpl).entity
				if(entity instanceof UnitInstanceImpl) {
					return getEntitiesForSpecificationScope(entity.unit)
				}
			}
		} 
		return getEntitiesForSpecificationScope(EcoreUtil2.getContainerOfType(context, Unit)) // For everything else
	}
	
	def private IScope getEntitiesForSpecificationScope(Unit unit) {
		val contents = EcoreUtil2.getAllContentsOfType(unit, Entity).filter[e|e.name !== null && e.name !== ""]
		return Scopes.scopeFor(contents)
	}

	def private IScope getScopeSpecificationOptions(EObject context, EReference reference) {
		println("--> " + context)
		return IScope.NULLSCOPE
	}

	def private IScope getScopeOptions(EObject context, EReference reference) {
		println("--> " + context)
		return IScope.NULLSCOPE
	}
}
