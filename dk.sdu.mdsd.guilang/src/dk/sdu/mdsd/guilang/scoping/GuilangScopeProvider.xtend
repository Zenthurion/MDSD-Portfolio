/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.guilang.scoping

import com.google.inject.Inject
import dk.sdu.mdsd.guilang.guilang.Specification
import dk.sdu.mdsd.guilang.guilang.Unit
import dk.sdu.mdsd.guilang.utils.GuilangModelUtils
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class GuilangScopeProvider extends AbstractGuilangScopeProvider {
	@Inject extension GuilangModelUtils

	override IScope getScope(EObject context, EReference reference) {
		if (context instanceof Specification) {
			return getSpecificationScope(context as Specification)
		}
		super.getScope(context, reference)
	}

	// retrieves all entities from the containing unit and assigns them as scope
	def private IScope getSpecificationScope(Specification spec) {
		if(spec === null) return IScope.NULLSCOPE
		var unit = spec.eContainer.eContainer as Unit
		var entities = getEntities(unit.layout)

		return Scopes.scopeFor(entities)
	}
}
