/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.guilang.generator

import com.google.inject.Inject
import dk.sdu.mdsd.guilang.generator.html.HTMLGenerator
import dk.sdu.mdsd.guilang.guilang.Entity
import dk.sdu.mdsd.guilang.guilang.Root
import dk.sdu.mdsd.guilang.guilang.Specifications
import dk.sdu.mdsd.guilang.guilang.TextValue
import dk.sdu.mdsd.guilang.utils.GuilangEntitySpecifications
import java.util.List
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
 
class GuilangGenerator extends AbstractGenerator {

	@Inject extension GuilangEntitySpecifications

	Resource resource
	IFileSystemAccess2 fsa
	IGeneratorContext context

	Root root
	String title
	
	def getResource(){
		return resource 
	}
	def getFsa() {
		return fsa
	}
	def getRoot() {
		return root
	}
	def getTitle() {
		return title
	}

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		if(resource.allContents.filter(Root).next.main === null) return;

		this.resource = resource
		this.fsa = fsa
		this.context = context

		root = resource.allContents.filter(Root).next
		title = getFileName(resource)
		
		val ILanguageGenerator generator = new HTMLGenerator(this)
		generator.generate()
	}

	def getFileName(Resource resource) {
		val uri = resource.URI.toString
		return uri.substring(uri.lastIndexOf('/') + 1, uri.length - 4)
	}
}
