grammar dk.sdu.mdsd.guilang.Guilang with org.eclipse.xtext.common.Terminals

generate guilang "http://www.sdu.dk/mdsd/guilang/Guilang"

Root:
	debug?=Debug?
	usings+=Using*
	main=Main?
	templates+=Template*
;

Debug: // For debugging purposes in development
	'debug'
;

Using:
	'use' importedNamespace=FQN ('as' localName=ID)?
;

Main returns Unit:
	{Main} 'main' name=ID contents=UnitContents
;

Template returns Unit:
	{Template} isPrivate?='private'? 'template' name=ID contents=UnitContents
;

UnitContents:
	OPEN
		variables+=Variable*
		layout=Layout
		specifications=Specifications?
	CLOSE
;

Entity:
	Layout | Element
;

Layout:
	(
		{Vertical} ('vertical' | 'v') |
		{Horizontal} ('horizontal' | 'h')
	) name=ID? OPEN entities += Entity*	CLOSE
;

Element: 
	(PrimitiveElement | UnitInstance) name=ID
;

PrimitiveElement returns Element:
	{Label} ('lbl' | 'label') |
	{Button} ('btn' | 'button') | 
	{Input} ('field' | 'input') | 
	{Checkbox} ('chk' | 'checkbox') |
	{TextArea} ('text-area')
;

UnitInstance returns Element:
	{UnitInstance} 'new'? unit=[Unit | ID]
;

Specifications:
	{Specifications} 'specifications' OPEN
		list+=Specification*
	CLOSE
;

Specification:
	{Specification} entity=[Entity | FQN]  OPEN options+=Option* CLOSE
;

Option:
	{DimOption} ('dim' | 'dimensions') ('=' width=INT'x'height=INT | ('w'| 'width') '=' width=INT  ('h'| 'height') '=' height=INT) |
	{SizeOption} 'size' '=' value=STRING |
    {BackgroundColor} 'bg-color' '=' (color=STRING | ref=[ColorVariable]) |
	{TextColor} 'text-color' '=' (color=STRING | ref=[ColorVariable]) |
	{TextSize} 'text-size' '=' value=INT unit=('px' | '%') |
    {TextValue} 'text' '=' value=STRING |
    {TextValidate} 'validate' '=' (value=RegexValidate | ref=[RegexVariable] | preset=PresetTextValidate) |
    {CheckboxValidate} 'validate' '=' (value='is-checked' | value='is-unchecked') |
    {RequireElements} 'require' '=' req=Require |
    {UnitInstanceOption} instanceSpecification=Specification
;

Variable:
	{ColorVariable} 'color' name=ID '=' value=STRING |
	{RegexVariable} 'regex' name=ID '=' value=STRING
;

RegexValidate:
	'regex' '=' value=STRING
;

enum PresetTextValidate: // Consider replacing this with a library document with them listed as strings instead
	password |
	email |
	not_empty
;

Require:
	RequireOr
;

RequireOr returns Require:
	RequireAnd ({Or.left=current} ('||') right=RequireAnd)*
;

RequireAnd returns Require:
	RequireBase ({And.left=current} ('&&') right=RequireBase)*
;

RequireBase returns Require:
	'(' exp=Require ')' |
	{Not} ('!' | 'NOT') exp=RequireBase |
	{ElementRef} ref=[Element]
;

FQN:
	ID ('.' ID)*
;

terminal OPEN:
	'{'
;

terminal CLOSE:
	'}'
;